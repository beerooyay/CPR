#!/usr/bin/env python3
"""AI and MCP Demo for CPR-NFL System"""
import asyncio
import sys
import os
from pathlib import Path

# Add src to path
sys.path.append(str(Path(__file__).parent.parent / "src"))
sys.path.append(str(Path(__file__).parent.parent / "mcp"))

from jaylen import JaylenAI
from client import MCPClient
from database import LocalDatabase

class DemoJaylenAI:
    """Demo version of Jaylen AI that works without OpenRouter"""
    
    def __init__(self):
        self.mcp_client = None
        self.db = None
    
    async def analyze_cpr_rankings(self, league_id: str) -> str:
        """Demo CPR analysis"""
        # Get fresh data via MCP
        league_data = await self.mcp_client.call_tool('sleeper', 'get_league_info', {'league_id': league_id})
        teams_data = await self.mcp_client.call_tool('sleeper', 'get_team_rosters', {'league_id': league_id})
        
        # Get historical CPR data
        cpr_data = self.db.get_cpr_rankings(league_id, latest_only=True)
        
        # Generate demo analysis
        analysis = f"""
# CPR Analysis for {league_data['name']}

## League Overview
- **Season**: {league_data['season']}, Week {league_data['current_week']}
- **Teams**: {league_data['num_teams']}
- **Status**: {league_data['status']}

## Current CPR Rankings
Based on the latest calculations, here are the key insights:

### Top Performers
1. **Team 7** - Strong SLI (0.600) with excellent roster balance
2. **Team 10** - Consistent performer with solid bench depth
3. **Team 1** - High win rate (6-1) but CPR suggests regression risk

### Key Insights
- **League Health**: 100% - Very competitive balance
- **Overperformers**: Team 9 (CPR rank higher than actual record)
- **Underperformers**: Team 12 (strong roster but underperforming)

### Recommendations
- **Trade Targets**: Look at Team 12's roster for buy-low opportunities
- **Waiver Wire**: Focus on players who can boost SLI scores
- **Schedule Analysis**: Teams 7 and 10 have favorable upcoming matchups

## Methodology
CPR scores are calculated using:
- **SLI (30%)**: Strength of Lineup Index
- **BSI (20%)**: Bench Strength Index
- **SMI (15%)**: Schedule Momentum Index
- **Ingram (15%)**: Injury/Availability Index
- **Alvarado (10%)**: Performance Consistency
- **Zion (10%)**: Explosive Play Potential

*This analysis was generated by Jaylen Hendricks AI using real-time Sleeper data and CPR methodology.*
        """
        
        return analysis
    
    async def evaluate_trade(self, league_id: str, trade_description: str) -> str:
        """Demo trade evaluation"""
        return f"""
# Trade Evaluation

**Trade**: {trade_description}

## Analysis
Based on CPR methodology and current player performance:

### Impact on Team 1
- **SLI Impact**: Moderate improvement
- **BSI Impact**: Slight decrease in bench depth
- **Overall CPR**: +0.05 projected

### Impact on Team 2  
- **SLI Impact**: Significant upgrade at QB position
- **BSI Impact**: Minimal impact
- **Overall CPR**: +0.08 projected

## Recommendation
**APPROVE** - This trade benefits both teams and improves competitive balance.

*Analysis by Jaylen Hendricks AI*
        """
    
    def set_mcp_client(self, mcp_client):
        self.mcp_client = mcp_client
    
    def set_database(self, database):
        self.db = database

async def run_demo():
    """Run AI and MCP demo"""
    print("🤖 CPR-NFL AI and MCP Demo")
    print("=" * 50)
    
    # Initialize components
    ai = DemoJaylenAI()
    mcp_client = MCPClient()
    db = LocalDatabase(str(Path(__file__).parent.parent / "data"))
    
    # Connect MCP servers
    print("\n🔌 Connecting MCP servers...")
    firebase_connected = await mcp_client.connect_server('firebase', {
        'command': 'npx',
        'args': ['-y', '@gannonh/firebase-mcp']
    })
    
    sleeper_connected = await mcp_client.connect_server('sleeper', {
        'command': 'python',
        'args': ['mcp/sleeper_server.py']
    })
    
    print(f"✅ Firebase MCP: {'Connected' if firebase_connected else 'Failed'}")
    print(f"✅ Sleeper MCP: {'Connected' if sleeper_connected else 'Failed'}")
    
    # Connect to AI
    ai.set_mcp_client(mcp_client)
    ai.set_database(db)
    
    # Test MCP tools
    print("\n🛠️ Testing MCP tools...")
    try:
        league_data = await mcp_client.call_tool('sleeper', 'get_league_info', {
            'league_id': '1267325171853701120'
        })
        print(f"✅ League Data: {league_data['name']} ({league_data['season']})")
        
        teams_data = await mcp_client.call_tool('sleeper', 'get_team_rosters', {
            'league_id': '1267325171853701120'
        })
        print(f"✅ Teams Data: {len(teams_data)} teams retrieved")
        
    except Exception as e:
        print(f"❌ MCP Tool Error: {e}")
    
    # Test AI analysis
    print("\n🧠 Testing AI Analysis...")
    try:
        cpr_analysis = await ai.analyze_cpr_rankings('1267325171853701120')
        print("✅ CPR Analysis Generated:")
        print(cpr_analysis[:500] + "...")
        
    except Exception as e:
        print(f"❌ AI Analysis Error: {e}")
    
    # Test trade evaluation
    print("\n💼 Testing Trade Evaluation...")
    try:
        trade_eval = await ai.evaluate_trade('1267325171853701120', 
            'Team 1 trades Patrick Mahomes for Team 2\'s Justin Herbert and TE upgrade')
        print("✅ Trade Evaluation:")
        print(trade_eval)
        
    except Exception as e:
        print(f"❌ Trade Evaluation Error: {e}")
    
    # List available tools
    print("\n📋 Available MCP Tools:")
    tools = await mcp_client.list_tools()
    for server, server_tools in tools.items():
        print(f"\n{server.upper()} Server:")
        for tool in server_tools:
            print(f"  - {tool['name']}: {tool['description']}")
    
    print("\n🎉 Demo Complete!")
    print("\nNext Steps:")
    print("1. Fix OpenRouter API key for real AI responses")
    print("2. Implement web chat interface")
    print("3. Add real-time CPR updates")
    print("4. Deploy to production")

if __name__ == "__main__":
    asyncio.run(run_demo())
